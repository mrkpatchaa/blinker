name: CI_CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v2
      - name: Install deps using Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - run: npm ci
      - run: npm run build --if-present
      - run: npm test --if-present

  build-and-publish-artifacts:
    name: Build (${{ matrix.os }} - ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: test
    strategy:
      matrix:
        # Build for supported platforms
        # https://github.com/electron/electron-packager/blob/ebcbd439ff3e0f6f92fa880ff28a8670a9bcf2ab/src/targets.js#L9
        # 32-bit Linux unsupported as of 2019: https://www.electronjs.org/blog/linux-32bit-support
        os: [macOS-latest, ubuntu-latest, windows-latest]
        arch: [x64, arm64]
        include:
          - os: windows-latest
            arch: ia32
          - os: ubuntu-latest
            arch: armv7l
        # Publishing artifacts for multiple Windows architectures has
        # a bug which can cause the wrong architecture to be downloaded
        # for an update, so until that is fixed, only build Windows x64
        exclude:
          - os: windows-latest
            arch: arm64
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Install deps
        uses: actions/setup-node@v2
        with:
          node-version: 18.x
          cache: "npm"
      - run: npm ci
      - run: npm test --if-present
      - name: Make
        run: npm run make --arch=${{ matrix.arch }}
      - uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: out/**/*.{dmg|deb}

  release-new-versions:
    name: Create a new release.
    runs-on: ubuntu-latest
    needs: build-and-publish-artifacts
    permissions:
      contents: write
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
          # ssh-key: ${{ secrets.GH_DEPLOY_KEY_PRIVATE }}

      - name: Get version
        id: get-version
        run: |
          npm --no-git-tag-version version ${{ github.event.inputs.release_type }}
          echo "::set-output name=version::$(grep '"version":' package.json | cut -d\" -f4)"
      - uses: actions/download-artifact@v3
        name: Download previously uploaded artifacts
        with:
          name: my-artifact
          path: out

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          artifacts: "out/**/*.dmg, out/**/*.deb"
          name: v${{ steps.get-version.outputs.version }}
          commit: ${{ github.event.pull_request.merge_commit_sha }}
          tag: v${{ steps.get-version.outputs.version }}
          draft: false
          prerelease: false

  sync-develop:
    name: Sync develop branch
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Merge main into develop branch
        continue-on-error: true
        uses: thomaseizinger/create-pull-request@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: main
          base: develop
          title: Merge main into develop branch
          body: |
            This PR merges the main branch back into develop.
            This happens to ensure that the updates that happend on the release branch, i.e. CHANGELOG and manifest updates are also present on the dev branch.
